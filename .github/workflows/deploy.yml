name: Deploy Service

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      registry:
        required: false
        type: string
        default: cr.yandex
      registry-path:
        required: false
        type: string
        default: crp8fh8qsgbjccrgdjdj
      app-name:
        required: false
        type: string
        default: myapp
      helm-chart-path:
        required: false
        type: string
        default: helm/app
      cluster-name:
        required: true
        type: string
    secrets:
      YC_IAM_TOKEN:
        required: true
      KUBE_CONFIG:
        required: true
      YC_SA_KEY_BASE64:
        required: true

      # TELEGRAM_BOT_TOKEN:
      #   required: true
      # TELEGRAM_CHAT_ID:
      #   required: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: 1.22

  #   - name: Run linters
  #     run: |
  #       curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.0
  #       golangci-lint run ./...

  #   - name: Run tests and build binary
  #     run: |
  #       # go mod tidy
  #       # go get github.com/stretchr/testify
  #       go test ./...
  #       mkdir -p ./bin
  #       go build -o ./bin/app ./cmd/main.go

    - name: Set TAG output
      id: set-tag
      run: |
        TAG=$(git describe --tags 2>/dev/null || git rev-parse --short HEAD)
        echo "tag=$TAG" >> $GITHUB_OUTPUT

  docker-build:
    runs-on: ubuntu-latest
    needs: [build]
    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
      TAG: ${{ needs.build.outputs.tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker login to Yandex Registry
      run: |
        echo "${{ secrets.YC_IAM_TOKEN }}" | docker login -u iam --password-stdin $REGISTRY

    - name: Build and push multiarch image to YCR
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --cache-from=type=registry,ref=$REGISTRY/$IMAGE_NAME:buildcache \
          --cache-to=type=registry,ref=$REGISTRY/$IMAGE_NAME:buildcache,mode=max \
          -t $REGISTRY/$IMAGE_NAME:$TAG \
          --push .

  helm-release:
    runs-on: ubuntu-latest
    # needs: [build, docker-build]
    needs: [build]
    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
      TAG: ${{ needs.build.outputs.tag }}
      CHART_PATH: ${{ inputs.helm-chart-path }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

  #   - name: Install Helm
  #     uses: azure/setup-helm@v4

    - name: Update Chart.yaml with new version
      run: |
        echo "Version: $TAG"
        sed -i "s/^appVersion:.*$/appVersion: \"$TAG\"/" $CHART_PATH/Chart.yaml
        sed -i "s|repository:.*$|repository: \"$REGISTRY/$IMAGE_NAME\"|" "$CHART_PATH/values.yaml"
        sed -i "s/tag:.*$/tag: \"$TAG\"/" $CHART_PATH/values.yaml

    - name: Lint Helm chart
      run: |
        helm lint $CHART_PATH
  security:
    runs-on: ubuntu-latest
    needs: [helm-release, build]
    steps:
    - name: Set up variables
      id: vars
      run: |
        REGISTRY="${{ inputs.registry }}"
        IMAGE_PATH="${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}"
        TAG="${{ needs.build.outputs.tag }}"
        echo "image_ref=$REGISTRY/$IMAGE_PATH:$TAG" >> $GITHUB_OUTPUT

    - name: Login to Yandex Registry
      run: |
        echo "${{ secrets.YC_IAM_TOKEN }}" | docker login -u iam --password-stdin ${{ inputs.registry }}

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.vars.outputs.image_ref }}

    - name: Security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.vars.outputs.image_ref }}

  deploy:
    runs-on: ubuntu-latest
    # needs: [helm-release, security]
    needs: [build,helm-release]
    env:
      REGISTRY: ${{ inputs.registry }}
      IMAGE_NAME: ${{ inputs.registry-path }}/${{ inputs.app-name }}/${{ inputs.environment }}
      TAG: ${{ needs.build.outputs.tag }}
      CHART_PATH: ${{ inputs.helm-chart-path }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Yandex CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        export PATH="$HOME/yandex-cloud/bin:$PATH"
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: Configure yc and kubeconfig
      run: |
        echo "${{ secrets.YC_SA_KEY_BASE64 }}" | base64 -d > key.json
        export PATH="$HOME/yandex-cloud/bin:$PATH"

        yc config profile create otus
        yc config profile activate otus
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

        # Получение kubeconfig с exec-авторизацией
        yc managed-kubernetes cluster get-credentials ${{ inputs.cluster-name }} \
          --external \
          --force

        kubectl get nodes

    - name: Helm deploy
      run: |
        sed -i "s/^appVersion:.*$/appVersion: \"$TAG\"/" $CHART_PATH/Chart.yaml
        helm upgrade --install my-app ./$CHART_PATH \
          --namespace ${{ inputs.environment }} \
          --create-namespace --wait \
          --set image.repository=$REGISTRY/$IMAGE_NAME \
          --set image.tag=$TAG
          

    # - name: Healthcheck
    #   run: |
    #     sleep 10
    #     curl -f http://my-app/healthz

  # notify:
  #   runs-on: ubuntu-latest
  #   if: failure()
  #   needs: [build, helm-release, security, deploy]
  #   env:
  #     TAG: ${{ needs.build.outputs.tag }}
  #   steps:
  #   - name: Notify on failure
  #     run: |
  #       curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
  #         -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
  #         -d text="❌ Deploy to *${{ inputs.environment }}* failed in ${{ github.repository }} on $TAG"